# -*- coding: utf-8 -*-
"""43177_DL_A3_IMG_CLASS.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1KGZl2mgdFlZA2OEOzTCgzX3jVUKHB1C_

# **43177 STUTI KUMAR**

# **A3 - Image Classification**
"""

import matplotlib.pyplot as plt
import tensorflow as tf
from tensorflow.keras import datasets, layers, models
import numpy as np

#grabbing CIFAR10 dataset
(train_images, train_labels), (test_images, test_labels) = datasets.cifar10.load_data()
print(train_images.shape, train_labels.shape, test_images.shape, test_labels.shape)

train_images, test_images = train_images.astype("float") / 255.0, test_images.astype("float") / 255.0

#showing images of mentioned categories
class_names = ['airplane', 'automobile', 'bird', 'cat', 'deer','dog', 'frog', 'horse', 'ship', 'truck']

plt.figure(figsize=(10,10))
for i in range(10):
    plt.subplot(5,5,i+1)
    plt.xticks([])
    plt.yticks([])
    plt.grid(False)
    plt.imshow(train_images[i])
    plt.xlabel(class_names[train_labels[i][0]])
plt.show()

#building CNN model
model = models.Sequential()
model.add(layers.Conv2D(32, (3, 3), activation='relu', input_shape=(32, 32, 3)))
model.add(layers.MaxPooling2D((2, 2)))
model.add(layers.Conv2D(64, (3, 3), activation='relu'))
model.add(layers.MaxPooling2D((2, 2)))
model.add(layers.Conv2D(64, (3, 3), activation='relu'))
model.add(layers.Flatten())
model.add(layers.Dense(64, activation='relu'))
model.add(layers.Dense(10))

model.summary()

# model compilation
model.compile(optimizer='adam',loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),metrics=['accuracy'])
epochs = 10
h = model.fit(train_images, train_labels, epochs=epochs, validation_data=(test_images, test_labels))

# plot the training loss and accuracy
plt.style.use("ggplot")
plt.figure()
plt.plot(np.arange(0, epochs), h.history["loss"], label="train_loss")
plt.plot(np.arange(0, epochs), h.history["val_loss"], label="val_loss")
plt.plot(np.arange(0, epochs), h.history["accuracy"], label="train_acc")
plt.plot(np.arange(0, epochs), h.history["val_accuracy"], label="val_acc")
plt.title("Training Loss and Accuracy")
plt.xlabel("Epoch #")
plt.ylabel("Loss/Accuracy")
plt.legend()

def predict(x:int = 0):
        # label mapping
 
        labels = '''airplane automobile bird cat deer dog frog horse ship truck'''.split()
        
        # select the image from our test dataset
        image_number = x
        
        # display the image
        plt.imshow(test_images[image_number])
        
        # load the image in an array
        n = np.array(test_images[image_number])
        
        # reshape it
        p = n.reshape(1, 32, 32, 3)
        
        # pass in the network for prediction and
        # save the predicted label
        predicted_label = labels[model.predict(p).argmax()]
        
        # load the original label

        #original_label = labels[test_labels[image_number]]
        
        # display the result
        #print("Original label is {} and predicted label is {}".format(original_label, predicted_label))
        print("Predicted label is {}".format(predicted_label))

predict(5722)

predict(8)

predict(7)

predict(239)