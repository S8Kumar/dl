# -*- coding: utf-8 -*-
"""43177_DL_A6_CALTECH_min.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1cZ0PYkw-3RtM-qHxwiTmE-wzJt2o3UpR
"""

import tensorflow as tf
import numpy as np
import tensorflow_datasets as tfds
from tensorflow.keras.utils import to_categorical
from tensorflow.keras.applications.vgg16 import VGG16
from tensorflow.keras.applications.vgg16 import preprocess_input
from tensorflow.keras import layers, models
from tensorflow.keras.callbacks import EarlyStopping
import torchvision.transforms as transforms

"""## Loading images and labels"""

(train_ds, train_labels), (test_ds, test_labels) = tfds.load(
    "caltech101",
    split=["train[:70%]", "train[:30%]"], ## Train test split
    batch_size=-1,
    as_supervised=True,  # Include labels
)

train_ds.shape

"""## Resizing images"""

size = (224,224)

train_ds = tf.image.resize(train_ds, (224, 224))
test_ds = tf.image.resize(test_ds, (224, 224))

train_ds.shape

"""## Transforming labels to correct format"""

train_labels = to_categorical(train_labels, num_classes=102)
test_labels = to_categorical(test_labels, num_classes=102)

train_ds.shape

"""## Preprocessing input"""

train_ds = preprocess_input(train_ds) 
test_ds = preprocess_input(test_ds)

"""## Loading VGG16 model"""

base_model = VGG16(weights="imagenet", include_top=False, input_shape=train_ds[0].shape)
base_model.trainable = False ## Not trainable weights

base_model.summary()

"""## Adding layers"""

flatten_layer = layers.Flatten()
dense_layer_1 = layers.Dense(500, activation='relu')
dense_layer_2 = layers.Dense(300, activation='relu')
prediction_layer = layers.Dense(102, activation='softmax')


model = models.Sequential([
    base_model,
    flatten_layer,
    dense_layer_1,
    dense_layer_2,
    prediction_layer
])

"""## Training model"""

model.compile(
    optimizer='adam',
    loss='categorical_crossentropy',
    metrics=['accuracy'],
)

es = EarlyStopping(monitor='val_accuracy', mode='max', patience=2,  restore_best_weights=True)

model.fit(train_ds, train_labels, epochs=1, validation_split=0.2, batch_size=32, callbacks=[es])