# -*- coding: utf-8 -*-
"""DL_A6_C10_TL.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dWPZnR6MJhREASC7vRxvwa1tqMwNORhr

# STUTI KUMAR  
## 43177
### LP4 A6
"""

import torch
import torchvision
import torch.nn as nn  # All neural network modules, nn.Linear, nn.Conv2d, BatchNorm, Loss functions
import torch.optim as optim  # For all Optimization algorithms, SGD, Adam, etc.
import torch.nn.functional as F  # All functions that don't have any parameters
from torch.utils.data import (DataLoader,)  # Gives easier dataset managment and creates mini batches
import torchvision.datasets as datasets  # Has standard datasets we can import in a nice way
import torchvision.transforms as transforms  # Transformations we can perform on our dataset

# Set device
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")

# Hyperparameters
num_classes = 102
learning_rate = 1e-3
batch_size = 128
num_epochs = 10

# Simple Identity class that let's input pass without changes
class Identity(nn.Module):
    def __init__(self):
        super(Identity, self).__init__()

    def forward(self, x):
        return x

"""### 1. Load in a pretrained model (VGG16)"""

model = torchvision.models.vgg16(pretrained=True)

print(model)

"""### 2. Freezing parameters in model's lower layers"""

# If you want to do finetuning then set requires_grad = False
for param in model.parameters():
    param.requires_grad = False

## Freezing the average pool layer of the model and add a custom classifier
model.avgpool = Identity()

"""### 3. Add custom classifier with several layers of trainable parameters to mode"""

model.classifier = nn.Sequential(
    nn.Linear(25088, 256),
    nn.ReLU(),
    nn.Dropout(0.4),
    nn.Linear(256, num_classes),
    nn.LogSoftmax(dim=1))
model.to(device)

"""### 4. Train classifier layers on training data available for task

"""

transforms = transforms.Compose([
 transforms.RandomResizedCrop(size=256, scale=(0.8, 1.0)),
 transforms.RandomRotation(degrees=15),
 transforms.ColorJitter(),
 transforms.RandomHorizontalFlip(),
 transforms.CenterCrop(size=224), # Image net standards
 transforms.Grayscale(num_output_channels=3),
 transforms.ToTensor(),
 transforms.Normalize([0.485, 0.456, 0.406],[0.229, 0.224, 0.225])])

# Load Data
train_dataset = datasets.Caltech101(root="dataset/", transform=transforms, download=True)

train_loader = DataLoader(dataset=train_dataset, batch_size=batch_size, shuffle=True)

# Loss and optimizer
criterion = nn.CrossEntropyLoss()
optimizer = optim.Adam(model.parameters(), lr=learning_rate)

# Train Network
for epoch in range(1):
    losses = []

    for batch_idx, (data, targets) in enumerate(train_loader):
        # Get data to cuda if possible
        data = data.to(device=device)
        targets = targets.to(device=device)

        # forward
        scores = model(data)
        loss = criterion(scores, targets)

        losses.append(loss.item())
        # backward
        optimizer.zero_grad()
        loss.backward()

        # gradient descent or adam step
        optimizer.step()

    print(f"Cost at epoch {epoch} is {sum(losses)/len(losses):.5f}")

"""### 5. Checking accuracy and fine tuning if required."""

def check_accuracy(loader, model):
    if loader.dataset.train:
        print("Checking accuracy on training data")
    else:
        print("Checking accuracy on test data")

    num_correct = 0
    num_samples = 0
    model.eval()

    with torch.no_grad():
        for x, y in loader:
            x = x.to(device=device)
            y = y.to(device=device)

            scores = model(x)
            _, predictions = scores.max(1)
            num_correct += (predictions == y).sum()
            num_samples += predictions.size(0)

        print(
            f"Got {num_correct} / {num_samples} with accuracy {float(num_correct)/float(num_samples)*100:.2f}"
        )

    model.train()

check_accuracy(train_loader, model)